var searchIndex = JSON.parse('{\
"rman":{"doc":"rman","t":"NNNDNNDNNNNNDENNGDNNLLLLLLLLLLMMMLLLLLLLLMMLLLLLMLALLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLMMLLLLLMMMMMMMLLMMLMLMMMLLLLLLLLLLLLLLLLLLLLMDDDDDDDLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLMMMMMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMM","n":["CompressedSizeTooLarge","ConversionFailure","Err","File","FileParseError","FlatbufferError","Header","InvalidMagicBytes","InvalidMajor","InvalidMinor","InvalidOffset","IoError","ManifestData","ManifestError","Ok","ReqwestError","Result","RiotManifest","SeekError","ZstdDecompressError","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bundle_entries","chunking_param_entries","chunks","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compressed_size","data","default","default","default","default","deserialize","directory_entries","download","entries","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","file_entries","files","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_path","from_reader","from_reader","header","id","into","into","into","into","into","key_entries","magic","major","manifest_id","minor","name","offset","parse","parse","path","permissions","serialize","size","source","symlink","tag_entries","tags","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uncompressed_size","BundleEntry","ChunkEntry","ChunkingParamEntry","DirectoryEntry","FileEntry","KeyEntry","TagEntry","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_ids","chunk_size","chunking_param_id","chunking_version","chunks","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compressed_size","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","directory_id","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","id","id","id","id","id","into","into","into","into","into","into","into","max_chunk_size","min_chunk_size","name","name","name","parent_id","permissions","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","symlink","tag_bitmask","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","unk0","unk0","unk1","unk10","unk5","unk6","unk8"],"q":[[0,"rman"],[129,"rman::entries"],[285,"core::result"],[286,"serde::de"],[287,"std::io"],[288,"core::marker"],[289,"reqwest::into_url"],[290,"core::fmt"],[291,"core::fmt"],[292,"reqwest::error"],[293,"std::io::error"],[294,"core::num::error"],[295,"flatbuffers::verifier"],[296,"std::path"],[297,"core::convert"],[298,"std::io"],[299,"std::collections::hash::map"],[300,"serde::ser"],[301,"core::error"],[302,"core::any"]],"d":["The error was caused by compressed size being too large.","The error was caused by a failure to convert from one …","Contains the error value","Single file object.","The error was caused by a failure to parse <code>FileEntry</code> into …","The error was caused by an invalid flatbuffer.","File header.","The error was caused by invalid magic bytes.","The error was caused by invalid major version.","The error was caused by invalid minor version.","The error was caused by an invalid offset.","The error was caused by a failure to read or write bytes …","Stores all of the flatbuffer data, as well as the parsed …","This enum represents all possible errors that may occur …","Contains the success value","The error was caused by a failure to process a <code>Request</code>.","Alias for a <code>Result</code> with the error type <code>ManifestError</code>.","Main parser object.","The error was caused by a failure to seek to a desired …","The error was caused by a failure to decompress zstd data.","","","","","","","","","","","Vector of bundle entries.","Vector of chunking param entries.","Vector of file chunks.","","","","","","","","","Size of the parsed flatbuffer schema before decompression.","Parsed flatbuffer data.","","","","","","Vector of directory entries.","Function to download the associated file contents.","Collection of entries from the parsed flatbuffer schema.","","","","","","","","","","","","","Vector of file entries.","Vector of files.","Manifest flags (no idea what any of them mean or do).","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads data from a file and parses it.","Main header parser method.","Main parser method.","Parsed file header data.","Id of the file.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Vector of key entries.","Magic bytes of the file.","Major version of the manifest format.","Manifest id.","Minor version of the manifest format.","File name.","Offset to the compressed flatbuffer data.","Parses <code>FileEntry</code> into a <code>File</code> object.","Main flatbuffer parser method.","Absolute path to the file, where root is one of the …","Permissions for the given file.","","Size of the file entry in bytes.","","Symbolic link of the file.","Vector of tag entries.","A vector of applicable tags.","","","","","","","","","","","","","","","","","","","","","Size of the parsed flatbuffer schema after decompression.","Single bundle entry object.","Single chunk entry object.","Single chunking param entry object.","Single directory entry object.","Single file entry object.","Single key entry object.","Single tag entry object.","","","","","","","","","","","","","","","A vector of chunk ids that make up the file.","Chunk size.","Id of the chunking param entry, which provides info about …","Determines the hash type used when generating chunks.","A vector of chunk entries.","","","","","","","","","","","","","","","Chunk size before decompression.","","","","","","","","","","","","","","","Id of the directory entry, to which it belongs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Id of the bundle entry.","Id of the chunk entry.","Id of the directory entry.","Id of the file entry.","Id of the tag entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum chunk size.","Minimum chunk size.","Name of the directory entry.","Name of the file entry.","Name of the tag entry.","Id of the parent directory entry.","Permissions for the given file entry.","","","","","","","","Size of the file entry in bytes.","Symbolic link of the file entry.","Applicable tags, stored as a bitmask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chunk size after decompression.","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …","Field with an unknown function and type (it might also be …"],"i":[13,13,8,0,13,13,0,13,13,13,13,13,0,0,8,13,0,0,13,13,13,1,2,3,4,13,1,2,3,4,3,3,1,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,3,1,0,1,2,3,4,1,1,2,2,3,3,4,4,3,3,2,13,13,1,2,3,4,13,13,13,13,13,1,2,3,4,4,2,4,4,1,13,1,2,3,4,3,2,2,2,2,1,2,1,3,1,1,1,1,13,1,3,1,1,2,3,4,13,13,1,2,3,4,13,1,2,3,4,13,1,2,3,4,2,0,0,0,0,0,0,0,36,37,38,39,26,40,41,36,37,38,39,26,40,41,26,38,26,38,36,36,37,38,39,26,40,41,36,37,38,39,26,40,41,37,36,37,38,39,26,40,41,36,37,38,39,26,40,41,26,36,37,38,39,26,40,41,36,36,37,37,38,38,39,39,26,26,40,40,41,41,36,37,38,39,26,40,41,36,37,38,39,26,40,41,36,37,39,26,41,36,37,38,39,26,40,41,38,38,39,26,41,39,26,36,37,38,39,26,40,41,26,26,26,36,37,38,39,26,40,41,36,37,38,39,26,40,41,36,37,38,39,26,40,41,36,37,38,39,26,40,41,37,38,40,40,26,26,26,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[1,1],[2,2],[3,3],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,[[],1],[[],2],[[],3],[[],4],[-1,[[6,[1]]],7],0,[[1,-1,-2],[[8,[5]]],[9,10],[11,10]],0,[[1,1],12],[[2,2],12],[[3,3],12],[[4,4],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],0,0,0,[[13,14],15],[[13,14],15],[[1,14],15],[[2,14],15],[[3,14],15],[[4,14],15],[-1,-1,[]],[16,13],[17,13],[18,13],[19,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,[21,[20]]],[[8,[4]]],[[23,[22]]]],[-1,[[8,[2]]],[24,25]],[[-1,[21,[20]]],[[8,[4]]],[24,25]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[26,[29,[27,28]],[29,[30,[5,[28,30]]]],[29,[30,[5,[30,31,31,31]]]]],[[8,[1]]]],[[[32,[27]],[21,[20]]],[[8,[3]]]],0,0,[[1,-1],6,33],0,[13,[[21,[34]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[36,36],[37,37],[38,38],[39,39],[26,26],[40,40],[41,41],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[],36],[[],37],[[],38],[[],39],[[],26],[[],40],[[],41],[-1,[[6,[36]]],7],[-1,[[6,[37]]],7],[-1,[[6,[38]]],7],[-1,[[6,[39]]],7],[-1,[[6,[26]]],7],[-1,[[6,[40]]],7],[-1,[[6,[41]]],7],0,[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[26,26],12],[[40,40],12],[[41,41],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[36,14],15],[[37,14],15],[[38,14],15],[[39,14],15],[[26,14],15],[[40,14],15],[[41,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[36,-1],6,33],[[37,-1],6,33],[[38,-1],6,33],[[39,-1],6,33],[[26,-1],6,33],[[40,-1],6,33],[[41,-1],6,33],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,0,0,0,0,0,0,0],"c":[],"p":[[3,"File",0],[3,"Header",0],[3,"ManifestData",0],[3,"RiotManifest",0],[15,"tuple"],[4,"Result",285],[8,"Deserializer",286],[6,"Result",0],[8,"Write",287],[8,"Send",288],[8,"IntoUrl",289],[15,"bool"],[4,"ManifestError",0],[3,"Formatter",290],[6,"Result",290],[4,"InvalidFlatbuffer",291],[3,"Error",292],[3,"Error",293],[3,"TryFromIntError",294],[3,"VerifierOptions",291],[4,"Option",295],[3,"Path",296],[8,"AsRef",297],[8,"Read",287],[8,"Seek",287],[3,"FileEntry",129],[15,"u8"],[3,"String",298],[3,"HashMap",299],[15,"i64"],[15,"u32"],[15,"slice"],[8,"Serializer",300],[8,"Error",301],[3,"TypeId",302],[3,"BundleEntry",129],[3,"ChunkEntry",129],[3,"ChunkingParamEntry",129],[3,"DirectoryEntry",129],[3,"KeyEntry",129],[3,"TagEntry",129]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
